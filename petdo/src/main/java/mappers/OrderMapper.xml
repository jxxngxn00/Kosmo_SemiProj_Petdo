<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="orderDAO">
	
	
   <!-- 결제 정보 입력하기 -->   
   <insert id="orderInsert" parameterType="OrderVO">
	INSERT INTO order_detail 
   (order_detail_number, product_number, product_name, product_count, product_price,  
   user_id, order_date, order_detail_status, refund_check) 
   VALUES
   (order_detail_seq.NEXTVAL, 
		(SELECT product_number FROM product WHERE product_name LIKE '%'||#{product_name}||'%'), 
   		#{product_name}, #{product_count}, #{product_price}, #{user_id}, SYSDATE, '준비중', 1)
   </insert>
	
	<!-- 장바구니 내용 비우기 -->
	<delete id="deleteCart" parameterType="OrderVO">
	DELETE FROM cart
	WHERE user_id = #{user_id}
	</delete>
	
	<!-- 주문내역 목록 불러오기 -->
	<select id="selectAllByUser" parameterType="String" resultType="OrderVO">
	SELECT order_detail_number, product_name, order_detail_status
	FROM   ( SELECT o.user_id AS user_id,o.order_detail_number AS order_detail_number, p.product_name AS product_name, o.order_detail_status order_detail_status
		        FROM order_detail o LEFT OUTER JOIN product p
		        ON o.product_number=p.product_number )  
	WHERE user_id=#{user_id}
	</select>
	
	<!-- 주문내역 상세조회 -->
	<select id="selectByUser" parameterType="Integer" resultType="OrderVO">
    SELECT order_detail_number, product_name, order_date, order_detail_status, user_name, product_price, refund_check
	FROM ( SELECT o.refund_check refund_check, o.user_id AS user_id, p.product_name AS product_name, o.order_detail_number AS order_detail_number,
                o.order_date AS order_date, o.order_detail_status AS order_detail_status, ui.user_name AS user_name, 
				o.product_price AS product_price
		       FROM order_detail o LEFT OUTER JOIN product p
		       ON o.product_number=p.product_number
               LEFT OUTER JOIN user_info ui
               ON o.user_id = ui.user_id)
	WHERE order_detail_number=#{order_detail_number}
	</select>
	
	<!-- 환불/교환신청 : 주문 테이블 입력 내용 변경 -->
	<update id="updateOrder" parameterType="ReturnVO">
		UPDATE order_detail
		SET 
		<choose>
			<when test="status=='refund'">
			order_detail_status='환불',
			</when>
			<when test="status=='exchange'">
			order_detail_status='교환',
			</when>
		</choose>
		refund_check=0
		WHERE user_id = #{user_id} AND order_detail_number=#{order_detail_number}
	</update>
	
	<!-- 환불 신청 : 환불 테이블에 입력 -->
	<insert id="insertReturn"  parameterType="ReturnVO">
	INSERT INTO order_refund(refund_number, refund_reason, refund_reason_detail, user_id, order_detail_number)
	VALUES(refund_seq.NEXTVAL, #{refund_reason},
	#{refund_reason_detail}, #{user_id}, #{order_detail_number})
	</insert>
	
	
	<!-- 교환 신청 : 교환 테이블에 입력 -->
	<insert id="insertExchange"  parameterType="ExchangeVO">
	INSERT INTO order_exchange(exchange_number, exchange_reason, exchange_reason_detail, user_id, order_detail_number)
	VALUES(exchange_seq.NEXTVAL, #{exchange_reason}, #{exchange_reason_detail},
		#{user_id}, #{order_detail_number})
	</insert>
	
	
	<!-- 환불 사유 -->
	<select id="rReason" parameterType="Integer" resultType="ReturnVO">
	SELECT *
	FROM order_refund
	WHERE order_detail_number = #{order_detail_number}
	</select>
	
	<!-- 교환 사유 -->
	<select id="eReason" parameterType="Integer" resultType="ExchangeVO">
	SELECT *
	FROM order_exchange
	WHERE order_detail_number = #{order_detail_number}
	</select>
	
	<!-- 배송 상태 변경 -->
	<update id="confirm" parameterType="Integer">
	UPDATE order_detail
	SET order_detail_status = '완료', refund_check=0
	WHERE order_detail_number = #{order_detail_number}
	</update>
	
	<!-- 관리자 : 주문내역 목록 -->
	<select id="selectAllByAdmin" resultType="OrderVO">
	SELECT order_detail_number, order_date, product_count, user_id, product_name, product_price, order_detail_status
	FROM   ( SELECT o.order_detail_number order_detail_number, o.order_date order_date, o.product_count product_count,
               				o.user_id user_id, p.product_name product_name, o.product_price product_price, o.order_detail_status order_detail_status
        		FROM order_detail o
                LEFT OUTER JOIN product p 
        		ON o.product_number=p.product_number )
		ORDER BY order_date DESC
	</select>
	
	<!-- 관리자 : 배송 상태 변경 -->
	<update id="changeStatus" parameterType="Integer">
	UPDATE order_detail
	SET order_detail_status = '배송중'
	WHERE order_detail_number = #{order_detail_number}
	</update>
	
	<!-- 관리자 : 환불및교환 승인 -->
	<update id="accept" parameterType="Integer">
	UPDATE order_detail
	SET order_detail_status = '승인'
	WHERE order_detail_number=#{order_detail_number}
	</update>
	
	<!-- 관리자 : 환불및교환 거절 -->
	<update id="reject" parameterType="Integer">
	UPDATE order_detail
	SET order_detail_status = '거절'
	WHERE order_detail_number=#{order_detail_number}
	</update>
	
</mapper>